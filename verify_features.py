#!/usr/bin/env python3
"""
Verification script for PHRM chat features:
1. "Generated by <AI Model>" display next to timestamp
2. Patient selector hiding in public mode
"""

import os
import sys
import requests
import json

# Add the current directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_chat_response_with_model_info():
    """Test that chat responses include model information"""
    
    print("üîç Testing chat response with model info...")
    
    # Test chat endpoint
    chat_url = "http://localhost:5000/ai/chat"
    
    payload = {
        "message": "Hello, can you help me?",
        "mode": "public",
        "patient": "self"
    }
    
    try:
        response = requests.post(chat_url, json=payload, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Chat response received")
            print(f"   Response: {data.get('response', 'N/A')[:50]}...")
            
            if 'model' in data:
                print(f"‚úÖ Model info included: {data['model']}")
                return True
            else:
                print("‚ùå Model info missing from response")
                return False
        else:
            print(f"‚ùå Chat request failed with status {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing chat: {str(e)}")
        return False

def check_template_features():
    """Check template files for feature implementation"""
    
    print("\nüîç Checking template implementations...")
    
    # Check chatbot.html for patient selector
    chatbot_path = "/home/em/code/wip/phrm/app/templates/ai/chatbot.html"
    try:
        with open(chatbot_path, 'r') as f:
            content = f.read()
            
        if 'patient-selector-container' in content and 'style="display: none;"' in content:
            print("‚úÖ Patient selector container found with default hidden state")
        else:
            print("‚ùå Patient selector hiding not properly implemented")
            
        if 'mode-selector' in content:
            print("‚úÖ Mode selector found in template")
        else:
            print("‚ùå Mode selector missing from template")
            
    except Exception as e:
        print(f"‚ùå Error checking chatbot template: {str(e)}")
    
    # Check chat-manager.js for model info display
    js_path = "/home/em/code/wip/phrm/app/static/js/chat-manager.js"
    try:
        with open(js_path, 'r') as f:
            content = f.read()
            
        if 'Generated by' in content and 'modelInfo' in content:
            print("‚úÖ Model info display logic found in JavaScript")
        else:
            print("‚ùå Model info display logic missing")
            
        if 'togglePatientSelector' in content:
            print("‚úÖ Patient selector toggle logic found")
        else:
            print("‚ùå Patient selector toggle logic missing")
            
    except Exception as e:
        print(f"‚ùå Error checking JavaScript file: {str(e)}")

def main():
    """Run all verification tests"""
    
    print("üöÄ PHRM Feature Verification")
    print("=" * 50)
    
    # Check if app is running
    try:
        response = requests.get("http://localhost:5000", timeout=5)
        if response.status_code == 200:
            print("‚úÖ PHRM application is running")
        else:
            print(f"‚ùå PHRM application returned status {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå PHRM application is not accessible: {str(e)}")
        return
    
    # Test chat functionality
    success = test_chat_response_with_model_info()
    
    # Check template implementations
    check_template_features()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ Feature verification completed successfully!")
        print("\nImplemented features:")
        print("1. ‚úÖ 'Generated by <AI Model>' displays next to timestamp")
        print("2. ‚úÖ Patient selector is hidden in public mode")
        print("3. ‚úÖ Patient selector shows in private mode")
        print("4. ‚úÖ Chat responses include model information")
    else:
        print("‚ö†Ô∏è  Some features may need attention")
    
    print("\nTo test manually:")
    print("1. Visit http://localhost:5000/ai/chatbot")
    print("2. Try both public and private modes")
    print("3. Send a chat message and verify model info appears")

if __name__ == "__main__":
    main()
