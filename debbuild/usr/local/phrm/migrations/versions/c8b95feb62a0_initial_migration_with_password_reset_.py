"""Initial migration with password reset fields

Revision ID: c8b95feb62a0
Revises: 
Create Date: 2025-06-04 15:16:47.415858

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c8b95feb62a0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ai_security_events', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_security_severity_status'))
        batch_op.drop_index(batch_op.f('idx_security_type_detected'))
        batch_op.drop_index(batch_op.f('idx_security_user_detected'))
        batch_op.drop_index(batch_op.f('ix_ai_security_events_audit_log_id'))
        batch_op.drop_index(batch_op.f('ix_ai_security_events_detected_at'))
        batch_op.drop_index(batch_op.f('ix_ai_security_events_event_id'))
        batch_op.drop_index(batch_op.f('ix_ai_security_events_event_type'))
        batch_op.drop_index(batch_op.f('ix_ai_security_events_severity'))
        batch_op.drop_index(batch_op.f('ix_ai_security_events_user_id'))

    op.drop_table('ai_security_events')
    with op.batch_alter_table('ai_data_access', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_data_access_audit'))
        batch_op.drop_index(batch_op.f('idx_data_access_classification'))
        batch_op.drop_index(batch_op.f('idx_data_access_purpose'))
        batch_op.drop_index(batch_op.f('idx_data_access_type_id'))
        batch_op.drop_index(batch_op.f('ix_ai_data_access_access_id'))
        batch_op.drop_index(batch_op.f('ix_ai_data_access_access_purpose'))
        batch_op.drop_index(batch_op.f('ix_ai_data_access_accessed_at'))
        batch_op.drop_index(batch_op.f('ix_ai_data_access_audit_log_id'))
        batch_op.drop_index(batch_op.f('ix_ai_data_access_data_classification'))
        batch_op.drop_index(batch_op.f('ix_ai_data_access_data_id'))
        batch_op.drop_index(batch_op.f('ix_ai_data_access_data_type'))

    op.drop_table('ai_data_access')
    with op.batch_alter_table('ai_compliance_reports', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_compliance_created'))
        batch_op.drop_index(batch_op.f('idx_compliance_framework_period'))
        batch_op.drop_index(batch_op.f('idx_compliance_score_status'))
        batch_op.drop_index(batch_op.f('ix_ai_compliance_reports_compliance_framework'))
        batch_op.drop_index(batch_op.f('ix_ai_compliance_reports_period_end'))
        batch_op.drop_index(batch_op.f('ix_ai_compliance_reports_period_start'))
        batch_op.drop_index(batch_op.f('ix_ai_compliance_reports_report_id'))

    op.drop_table('ai_compliance_reports')
    with op.batch_alter_table('ai_operation_metrics', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_metrics_date_type'))
        batch_op.drop_index(batch_op.f('idx_metrics_performance'))
        batch_op.drop_index(batch_op.f('idx_metrics_period_model'))
        batch_op.drop_index(batch_op.f('ix_ai_operation_metrics_aggregation_period'))
        batch_op.drop_index(batch_op.f('ix_ai_operation_metrics_metric_date'))
        batch_op.drop_index(batch_op.f('ix_ai_operation_metrics_operation_type'))

    op.drop_table('ai_operation_metrics')
    with op.batch_alter_table('ai_audit_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_ai_audit_classification'))
        batch_op.drop_index(batch_op.f('idx_ai_audit_compliance'))
        batch_op.drop_index(batch_op.f('idx_ai_audit_operation_timestamp'))
        batch_op.drop_index(batch_op.f('idx_ai_audit_risk'))
        batch_op.drop_index(batch_op.f('idx_ai_audit_session'))
        batch_op.drop_index(batch_op.f('idx_ai_audit_status'))
        batch_op.drop_index(batch_op.f('idx_ai_audit_user_timestamp'))
        batch_op.drop_index(batch_op.f('ix_ai_audit_logs_operation_type'))
        batch_op.drop_index(batch_op.f('ix_ai_audit_logs_session_id'))
        batch_op.drop_index(batch_op.f('ix_ai_audit_logs_timestamp'))
        batch_op.drop_index(batch_op.f('ix_ai_audit_logs_user_id'))

    op.drop_table('ai_audit_logs')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('ai_insights')
        batch_op.drop_column('notification_frequency')
        batch_op.drop_column('is_admin')
        batch_op.drop_column('security_alerts')
        batch_op.drop_column('record_reminders')
        batch_op.drop_column('email_notifications')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email_notifications', sa.BOOLEAN(), server_default=sa.text('1'), nullable=False))
        batch_op.add_column(sa.Column('record_reminders', sa.BOOLEAN(), server_default=sa.text('1'), nullable=False))
        batch_op.add_column(sa.Column('security_alerts', sa.BOOLEAN(), server_default=sa.text('1'), nullable=False))
        batch_op.add_column(sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.text('0'), nullable=False))
        batch_op.add_column(sa.Column('notification_frequency', sa.VARCHAR(length=20), server_default=sa.text("'daily'"), nullable=False))
        batch_op.add_column(sa.Column('ai_insights', sa.BOOLEAN(), server_default=sa.text('1'), nullable=False))

    op.create_table('ai_audit_logs',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('timestamp', sa.DATETIME(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=128), nullable=True),
    sa.Column('operation_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('operation_subtype', sa.VARCHAR(length=50), nullable=True),
    sa.Column('data_classification', sa.VARCHAR(length=20), nullable=False),
    sa.Column('sensitivity_level', sa.VARCHAR(length=20), nullable=False),
    sa.Column('ai_model_used', sa.VARCHAR(length=100), nullable=True),
    sa.Column('ai_model_version', sa.VARCHAR(length=50), nullable=True),
    sa.Column('fallback_used', sa.BOOLEAN(), nullable=True),
    sa.Column('input_size', sa.INTEGER(), nullable=True),
    sa.Column('output_size', sa.INTEGER(), nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), nullable=True),
    sa.Column('medical_context_accessed', sa.BOOLEAN(), nullable=True),
    sa.Column('pii_detected', sa.BOOLEAN(), nullable=True),
    sa.Column('family_member_id', sa.INTEGER(), nullable=True),
    sa.Column('health_record_ids', sa.TEXT(), nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), nullable=True),
    sa.Column('geographic_location', sa.VARCHAR(length=100), nullable=True),
    sa.Column('risk_score', sa.FLOAT(), nullable=True),
    sa.Column('risk_factors', sa.TEXT(), nullable=True),
    sa.Column('hipaa_applicable', sa.BOOLEAN(), nullable=True),
    sa.Column('gdpr_applicable', sa.BOOLEAN(), nullable=True),
    sa.Column('soc2_applicable', sa.BOOLEAN(), nullable=True),
    sa.Column('nist_applicable', sa.BOOLEAN(), nullable=True),
    sa.Column('operation_status', sa.VARCHAR(length=20), nullable=False),
    sa.Column('error_code', sa.VARCHAR(length=50), nullable=True),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.Column('retention_period_days', sa.INTEGER(), nullable=False),
    sa.Column('archived', sa.BOOLEAN(), nullable=True),
    sa.Column('archive_date', sa.DATETIME(), nullable=True),
    sa.Column('additional_context', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['family_member_id'], ['family_members.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_audit_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_audit_logs_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_audit_logs_timestamp'), ['timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_audit_logs_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_audit_logs_operation_type'), ['operation_type'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_audit_user_timestamp'), ['user_id', 'timestamp'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_audit_status'), ['operation_status', 'timestamp'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_audit_session'), ['session_id', 'timestamp'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_audit_risk'), ['risk_score', 'timestamp'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_audit_operation_timestamp'), ['operation_type', 'timestamp'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_audit_compliance'), ['hipaa_applicable', 'gdpr_applicable', 'timestamp'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_audit_classification'), ['data_classification', 'sensitivity_level'], unique=False)

    op.create_table('ai_operation_metrics',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('metric_date', sa.DATE(), nullable=False),
    sa.Column('aggregation_period', sa.VARCHAR(length=20), nullable=False),
    sa.Column('operation_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('ai_model_used', sa.VARCHAR(length=100), nullable=True),
    sa.Column('total_operations', sa.INTEGER(), nullable=False),
    sa.Column('successful_operations', sa.INTEGER(), nullable=False),
    sa.Column('failed_operations', sa.INTEGER(), nullable=False),
    sa.Column('avg_processing_time_ms', sa.FLOAT(), nullable=True),
    sa.Column('min_processing_time_ms', sa.INTEGER(), nullable=True),
    sa.Column('max_processing_time_ms', sa.INTEGER(), nullable=True),
    sa.Column('total_processing_time_ms', sa.BIGINT(), nullable=True),
    sa.Column('total_input_chars', sa.BIGINT(), nullable=True),
    sa.Column('total_output_chars', sa.BIGINT(), nullable=True),
    sa.Column('avg_input_size', sa.FLOAT(), nullable=True),
    sa.Column('avg_output_size', sa.FLOAT(), nullable=True),
    sa.Column('unique_users', sa.INTEGER(), nullable=False),
    sa.Column('unique_sessions', sa.INTEGER(), nullable=False),
    sa.Column('avg_risk_score', sa.FLOAT(), nullable=True),
    sa.Column('high_risk_operations', sa.INTEGER(), nullable=False),
    sa.Column('phi_accessed_operations', sa.INTEGER(), nullable=False),
    sa.Column('error_rate', sa.FLOAT(), nullable=True),
    sa.Column('common_errors', sa.TEXT(), nullable=True),
    sa.Column('geographic_distribution', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.Column('updated_at', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_operation_metrics', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_operation_metrics_operation_type'), ['operation_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_operation_metrics_metric_date'), ['metric_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_operation_metrics_aggregation_period'), ['aggregation_period'], unique=False)
        batch_op.create_index(batch_op.f('idx_metrics_period_model'), ['aggregation_period', 'ai_model_used'], unique=False)
        batch_op.create_index(batch_op.f('idx_metrics_performance'), ['avg_processing_time_ms', 'error_rate'], unique=False)
        batch_op.create_index(batch_op.f('idx_metrics_date_type'), ['metric_date', 'operation_type'], unique=False)

    op.create_table('ai_compliance_reports',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('report_id', sa.VARCHAR(length=100), nullable=False),
    sa.Column('compliance_framework', sa.VARCHAR(length=50), nullable=False),
    sa.Column('period_start', sa.DATETIME(), nullable=False),
    sa.Column('period_end', sa.DATETIME(), nullable=False),
    sa.Column('total_operations', sa.INTEGER(), nullable=False),
    sa.Column('compliant_operations', sa.INTEGER(), nullable=False),
    sa.Column('non_compliant_operations', sa.INTEGER(), nullable=False),
    sa.Column('compliance_score', sa.FLOAT(), nullable=False),
    sa.Column('high_risk_operations', sa.INTEGER(), nullable=False),
    sa.Column('medium_risk_operations', sa.INTEGER(), nullable=False),
    sa.Column('low_risk_operations', sa.INTEGER(), nullable=False),
    sa.Column('average_risk_score', sa.FLOAT(), nullable=True),
    sa.Column('critical_violations', sa.INTEGER(), nullable=False),
    sa.Column('major_violations', sa.INTEGER(), nullable=False),
    sa.Column('minor_violations', sa.INTEGER(), nullable=False),
    sa.Column('violation_details', sa.TEXT(), nullable=True),
    sa.Column('recommendations', sa.TEXT(), nullable=True),
    sa.Column('action_items', sa.TEXT(), nullable=True),
    sa.Column('report_summary', sa.TEXT(), nullable=True),
    sa.Column('executive_summary', sa.TEXT(), nullable=True),
    sa.Column('detailed_findings', sa.TEXT(), nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), nullable=False),
    sa.Column('generated_by', sa.VARCHAR(length=100), nullable=True),
    sa.Column('reviewed_by', sa.VARCHAR(length=100), nullable=True),
    sa.Column('approved_by', sa.VARCHAR(length=100), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.Column('finalized_at', sa.DATETIME(), nullable=True),
    sa.Column('next_review_date', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_compliance_reports', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_compliance_reports_report_id'), ['report_id'], unique=1)
        batch_op.create_index(batch_op.f('ix_ai_compliance_reports_period_start'), ['period_start'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_compliance_reports_period_end'), ['period_end'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_compliance_reports_compliance_framework'), ['compliance_framework'], unique=False)
        batch_op.create_index(batch_op.f('idx_compliance_score_status'), ['compliance_score', 'status'], unique=False)
        batch_op.create_index(batch_op.f('idx_compliance_framework_period'), ['compliance_framework', 'period_start', 'period_end'], unique=False)
        batch_op.create_index(batch_op.f('idx_compliance_created'), ['created_at'], unique=False)

    op.create_table('ai_data_access',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('access_id', sa.VARCHAR(length=100), nullable=False),
    sa.Column('audit_log_id', sa.INTEGER(), nullable=False),
    sa.Column('data_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('data_id', sa.VARCHAR(length=100), nullable=False),
    sa.Column('data_classification', sa.VARCHAR(length=20), nullable=False),
    sa.Column('access_purpose', sa.VARCHAR(length=100), nullable=False),
    sa.Column('access_method', sa.VARCHAR(length=50), nullable=False),
    sa.Column('data_fields_accessed', sa.TEXT(), nullable=True),
    sa.Column('data_size_chars', sa.INTEGER(), nullable=True),
    sa.Column('sensitive_data_detected', sa.BOOLEAN(), nullable=True),
    sa.Column('phi_categories', sa.TEXT(), nullable=True),
    sa.Column('legal_basis', sa.VARCHAR(length=100), nullable=True),
    sa.Column('consent_id', sa.VARCHAR(length=100), nullable=True),
    sa.Column('data_necessary', sa.BOOLEAN(), nullable=True),
    sa.Column('alternative_available', sa.BOOLEAN(), nullable=True),
    sa.Column('accessed_at', sa.DATETIME(), nullable=False),
    sa.Column('data_last_modified', sa.DATETIME(), nullable=True),
    sa.Column('retention_period_days', sa.INTEGER(), nullable=False),
    sa.Column('data_disposed', sa.BOOLEAN(), nullable=True),
    sa.Column('disposal_date', sa.DATETIME(), nullable=True),
    sa.Column('disposal_method', sa.VARCHAR(length=50), nullable=True),
    sa.ForeignKeyConstraint(['audit_log_id'], ['ai_audit_logs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_data_access', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_data_access_data_type'), ['data_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_data_access_data_id'), ['data_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_data_access_data_classification'), ['data_classification'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_data_access_audit_log_id'), ['audit_log_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_data_access_accessed_at'), ['accessed_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_data_access_access_purpose'), ['access_purpose'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_data_access_access_id'), ['access_id'], unique=1)
        batch_op.create_index(batch_op.f('idx_data_access_type_id'), ['data_type', 'data_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_data_access_purpose'), ['access_purpose', 'accessed_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_data_access_classification'), ['data_classification', 'accessed_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_data_access_audit'), ['audit_log_id', 'accessed_at'], unique=False)

    op.create_table('ai_security_events',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('event_id', sa.VARCHAR(length=100), nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), nullable=False),
    sa.Column('audit_log_id', sa.INTEGER(), nullable=True),
    sa.Column('event_description', sa.TEXT(), nullable=False),
    sa.Column('detection_method', sa.VARCHAR(length=100), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('operation_type', sa.VARCHAR(length=50), nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), nullable=True),
    sa.Column('risk_score', sa.FLOAT(), nullable=True),
    sa.Column('potential_impact', sa.VARCHAR(length=500), nullable=True),
    sa.Column('affected_data_types', sa.TEXT(), nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), nullable=False),
    sa.Column('assigned_to', sa.VARCHAR(length=100), nullable=True),
    sa.Column('response_actions', sa.TEXT(), nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), nullable=True),
    sa.Column('detected_at', sa.DATETIME(), nullable=False),
    sa.Column('acknowledged_at', sa.DATETIME(), nullable=True),
    sa.Column('resolved_at', sa.DATETIME(), nullable=True),
    sa.Column('closed_at', sa.DATETIME(), nullable=True),
    sa.Column('notifications_sent', sa.BOOLEAN(), nullable=True),
    sa.Column('escalated', sa.BOOLEAN(), nullable=True),
    sa.Column('escalation_level', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['audit_log_id'], ['ai_audit_logs.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_security_events', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_security_events_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_security_events_severity'), ['severity'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_security_events_event_type'), ['event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_security_events_event_id'), ['event_id'], unique=1)
        batch_op.create_index(batch_op.f('ix_ai_security_events_detected_at'), ['detected_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_ai_security_events_audit_log_id'), ['audit_log_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_security_user_detected'), ['user_id', 'detected_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_security_type_detected'), ['event_type', 'detected_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_security_severity_status'), ['severity', 'status'], unique=False)

    # ### end Alembic commands ###
