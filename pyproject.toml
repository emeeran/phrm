[project]
name = "phrm"
version = "1.0.0"
description = "Personal Health Record Manager - A secure and optimized health record management system"
authors = [
    {name = "PHRM Team", email = "team@phrm.com"}
]
readme = "README.md"
requires-python = ">=3.9"

dependencies = [
    # Core Flask Framework
    "Flask>=2.3.0",
    "Flask-SQLAlchemy>=3.0.0",
    "Flask-Login>=0.6.0",
    "Flask-WTF>=1.1.0",
    "Flask-Migrate>=2.7.0",
    "Flask-Mail>=0.9.0",
    "Flask-Session>=0.5.0",

    # Security and Rate Limiting
    "Flask-Limiter>=3.5.0",
    "Flask-Talisman>=1.1.0",
    "WTForms>=3.0.0",
    "bcrypt>=4.0.0",
    "cryptography>=41.0.0",

    # Database and Caching
    "SQLAlchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "Flask-Caching>=2.1.0",

    # WSGI Server and Async Support
    "gunicorn>=21.0.0",
    "gevent>=23.9.0",

    # AI/ML Integration (optional - can be installed separately if needed)
    "openai>=0.28.0",
    "PyMuPDF>=1.23.0",
    "transformers>=4.35.0",

    # Utilities and System Monitoring
    "python-dotenv>=1.0.0",
    "psutil>=5.9.0",
    "requests>=2.31.0",
    "Pillow>=10.0.0",

    # Core Dependencies
    "Werkzeug>=2.3.0",
    "click>=8.1.0",
    "itsdangerous>=2.1.0",
    "MarkupSafe>=2.1.0",
    "Jinja2>=3.1.0",
    "blinker>=1.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-flask>=1.2.0",
    "pytest-cov>=5.0.0",
    "coverage>=7.3.0",
    "ruff>=0.11.0",
    "mypy>=1.16.0",
    "black>=25.0.0",
    "isort>=6.0.0",
    "pre-commit>=4.0.0",
]

ai = [
    "langchain>=0.1.0",
    "langchain_community>=0.0.5",
    "langchain-openai>=0.0.5",
]

test = [
    "pytest>=7.4.0",
    "pytest-flask>=1.2.0",
    "pytest-cov>=5.0.0",
    "coverage>=7.3.0",
]

lint = [
    "ruff>=0.11.0",
    "mypy>=1.16.0",
    "black>=25.0.0",
    "isort>=6.0.0",
    "types-redis",
    "types-requests",
    "types-Pillow",
]

[project.scripts]
phrm = "run:main"

[project.urls]
Homepage = "https://github.com/phrm/phrm"
Documentation = "https://github.com/phrm/phrm/docs"
Repository = "https://github.com/emeeran/phrm.git"
"Bug Tracker" = "https://github.com/phrm/phrm/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*"]

# Ruff Configuration
[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "ARG002",  # unused method argument
    "DTZ005",  # timezone-naive datetime
    "UP007",   # typing union syntax (X | Y)
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "instance",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__ files
"test_*.py" = ["ARG001", "ARG002"]  # Allow unused arguments in tests
"scripts/*.py" = ["PLR0913"]  # Allow many arguments in scripts

[tool.ruff.lint.isort]
known-first-party = ["app"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy Configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "flask_sqlalchemy.*",
    "flask_login.*",
    "flask_wtf.*",
    "flask_migrate.*",
    "flask_mail.*",
    "flask_limiter.*",
    "flask_talisman.*",
    "flask_caching.*",
    "wtforms.*",
    "bcrypt.*",
    "psycopg2.*",
    "redis.*",
    "gunicorn.*",
    "gevent.*",
    "openai.*",
    "PyMuPDF.*",
    "transformers.*",
    "langchain_community.*",
    "psutil.*",
    "PIL.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/tests/*",
    "*/instance/*",
    "*/uploads/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.16.0",
    "pre-commit>=4.2.0",
    "pytest>=7.4.2",
    "pytest-cov>=5.0.0",
    "ruff>=0.11.13",
]
