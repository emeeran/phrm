"""Add appointments and enhanced models

Revision ID: 60b773dd37d4
Revises: a89f60fbac28
Create Date: 2025-06-18 08:27:07.917558

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "60b773dd37d4"
down_revision = "a89f60fbac28"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ai_compliance_reports",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("report_id", sa.String(length=100), nullable=False),
        sa.Column("compliance_framework", sa.String(length=50), nullable=False),
        sa.Column("period_start", sa.DateTime(), nullable=False),
        sa.Column("period_end", sa.DateTime(), nullable=False),
        sa.Column("total_operations", sa.Integer(), nullable=False),
        sa.Column("compliant_operations", sa.Integer(), nullable=False),
        sa.Column("non_compliant_operations", sa.Integer(), nullable=False),
        sa.Column("compliance_score", sa.Float(), nullable=False),
        sa.Column("high_risk_operations", sa.Integer(), nullable=False),
        sa.Column("medium_risk_operations", sa.Integer(), nullable=False),
        sa.Column("low_risk_operations", sa.Integer(), nullable=False),
        sa.Column("average_risk_score", sa.Float(), nullable=True),
        sa.Column("critical_violations", sa.Integer(), nullable=False),
        sa.Column("major_violations", sa.Integer(), nullable=False),
        sa.Column("minor_violations", sa.Integer(), nullable=False),
        sa.Column("violation_details", sa.Text(), nullable=True),
        sa.Column("recommendations", sa.Text(), nullable=True),
        sa.Column("action_items", sa.Text(), nullable=True),
        sa.Column("report_summary", sa.Text(), nullable=True),
        sa.Column("executive_summary", sa.Text(), nullable=True),
        sa.Column("detailed_findings", sa.Text(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("generated_by", sa.String(length=100), nullable=True),
        sa.Column("reviewed_by", sa.String(length=100), nullable=True),
        sa.Column("approved_by", sa.String(length=100), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("finalized_at", sa.DateTime(), nullable=True),
        sa.Column("next_review_date", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ai_compliance_reports", schema=None) as batch_op:
        batch_op.create_index("idx_compliance_created", ["created_at"], unique=False)
        batch_op.create_index(
            "idx_compliance_framework_period",
            ["compliance_framework", "period_start", "period_end"],
            unique=False,
        )
        batch_op.create_index(
            "idx_compliance_score_status", ["compliance_score", "status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_compliance_reports_compliance_framework"),
            ["compliance_framework"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_compliance_reports_period_end"),
            ["period_end"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_compliance_reports_period_start"),
            ["period_start"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_compliance_reports_report_id"), ["report_id"], unique=True
        )

    op.create_table(
        "ai_operation_metrics",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("metric_date", sa.Date(), nullable=False),
        sa.Column("aggregation_period", sa.String(length=20), nullable=False),
        sa.Column("operation_type", sa.String(length=50), nullable=False),
        sa.Column("ai_model_used", sa.String(length=100), nullable=True),
        sa.Column("total_operations", sa.Integer(), nullable=False),
        sa.Column("successful_operations", sa.Integer(), nullable=False),
        sa.Column("failed_operations", sa.Integer(), nullable=False),
        sa.Column("avg_processing_time_ms", sa.Float(), nullable=True),
        sa.Column("min_processing_time_ms", sa.Integer(), nullable=True),
        sa.Column("max_processing_time_ms", sa.Integer(), nullable=True),
        sa.Column("total_processing_time_ms", sa.BigInteger(), nullable=True),
        sa.Column("total_input_chars", sa.BigInteger(), nullable=True),
        sa.Column("total_output_chars", sa.BigInteger(), nullable=True),
        sa.Column("avg_input_size", sa.Float(), nullable=True),
        sa.Column("avg_output_size", sa.Float(), nullable=True),
        sa.Column("unique_users", sa.Integer(), nullable=False),
        sa.Column("unique_sessions", sa.Integer(), nullable=False),
        sa.Column("avg_risk_score", sa.Float(), nullable=True),
        sa.Column("high_risk_operations", sa.Integer(), nullable=False),
        sa.Column("phi_accessed_operations", sa.Integer(), nullable=False),
        sa.Column("error_rate", sa.Float(), nullable=True),
        sa.Column("common_errors", sa.Text(), nullable=True),
        sa.Column("geographic_distribution", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ai_operation_metrics", schema=None) as batch_op:
        batch_op.create_index(
            "idx_metrics_date_type", ["metric_date", "operation_type"], unique=False
        )
        batch_op.create_index(
            "idx_metrics_performance",
            ["avg_processing_time_ms", "error_rate"],
            unique=False,
        )
        batch_op.create_index(
            "idx_metrics_period_model",
            ["aggregation_period", "ai_model_used"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_operation_metrics_aggregation_period"),
            ["aggregation_period"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_operation_metrics_metric_date"),
            ["metric_date"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_operation_metrics_operation_type"),
            ["operation_type"],
            unique=False,
        )

    op.create_table(
        "family_members",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(length=50), nullable=False),
        sa.Column("last_name", sa.String(length=50), nullable=False),
        sa.Column("date_of_birth", sa.Date(), nullable=True),
        sa.Column("relationship", sa.String(length=50), nullable=True),
        sa.Column("gender", sa.String(length=20), nullable=True),
        sa.Column("blood_type", sa.String(length=10), nullable=True),
        sa.Column("height", sa.Float(), nullable=True),
        sa.Column("weight", sa.Float(), nullable=True),
        sa.Column("emergency_contact_name", sa.String(length=100), nullable=True),
        sa.Column("emergency_contact_phone", sa.String(length=20), nullable=True),
        sa.Column("primary_doctor", sa.String(length=100), nullable=True),
        sa.Column("insurance_provider", sa.String(length=100), nullable=True),
        sa.Column("insurance_number", sa.String(length=50), nullable=True),
        sa.Column("allergies", sa.Text(), nullable=True),
        sa.Column("chronic_conditions", sa.Text(), nullable=True),
        sa.Column("current_medications", sa.Text(), nullable=True),
        sa.Column("family_medical_history", sa.Text(), nullable=True),
        sa.Column("surgical_history", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("username", sa.String(length=80), nullable=False),
        sa.Column("password_hash", sa.String(length=128), nullable=False),
        sa.Column("first_name", sa.String(length=50), nullable=True),
        sa.Column("last_name", sa.String(length=50), nullable=True),
        sa.Column("date_of_birth", sa.Date(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.Column("email_notifications", sa.Boolean(), nullable=False),
        sa.Column("record_reminders", sa.Boolean(), nullable=False),
        sa.Column("security_alerts", sa.Boolean(), nullable=False),
        sa.Column("ai_insights", sa.Boolean(), nullable=False),
        sa.Column("notification_frequency", sa.String(length=20), nullable=False),
        sa.Column("reset_token", sa.String(length=100), nullable=True),
        sa.Column("reset_token_expiry", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "ai_audit_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("session_id", sa.String(length=128), nullable=True),
        sa.Column("operation_type", sa.String(length=50), nullable=False),
        sa.Column("operation_subtype", sa.String(length=50), nullable=True),
        sa.Column("data_classification", sa.String(length=20), nullable=False),
        sa.Column("sensitivity_level", sa.String(length=20), nullable=False),
        sa.Column("ai_model_used", sa.String(length=100), nullable=True),
        sa.Column("ai_model_version", sa.String(length=50), nullable=True),
        sa.Column("fallback_used", sa.Boolean(), nullable=True),
        sa.Column("input_size", sa.Integer(), nullable=True),
        sa.Column("output_size", sa.Integer(), nullable=True),
        sa.Column("processing_time_ms", sa.Integer(), nullable=True),
        sa.Column("medical_context_accessed", sa.Boolean(), nullable=True),
        sa.Column("pii_detected", sa.Boolean(), nullable=True),
        sa.Column("family_member_id", sa.Integer(), nullable=True),
        sa.Column("health_record_ids", sa.Text(), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.String(length=500), nullable=True),
        sa.Column("geographic_location", sa.String(length=100), nullable=True),
        sa.Column("risk_score", sa.Float(), nullable=True),
        sa.Column("risk_factors", sa.Text(), nullable=True),
        sa.Column("hipaa_applicable", sa.Boolean(), nullable=True),
        sa.Column("gdpr_applicable", sa.Boolean(), nullable=True),
        sa.Column("soc2_applicable", sa.Boolean(), nullable=True),
        sa.Column("nist_applicable", sa.Boolean(), nullable=True),
        sa.Column("operation_status", sa.String(length=20), nullable=False),
        sa.Column("error_code", sa.String(length=50), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("retention_period_days", sa.Integer(), nullable=False),
        sa.Column("archived", sa.Boolean(), nullable=True),
        sa.Column("archive_date", sa.DateTime(), nullable=True),
        sa.Column("additional_context", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["family_member_id"],
            ["family_members.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ai_audit_logs", schema=None) as batch_op:
        batch_op.create_index(
            "idx_ai_audit_classification",
            ["data_classification", "sensitivity_level"],
            unique=False,
        )
        batch_op.create_index(
            "idx_ai_audit_compliance",
            ["hipaa_applicable", "gdpr_applicable", "timestamp"],
            unique=False,
        )
        batch_op.create_index(
            "idx_ai_audit_operation_timestamp",
            ["operation_type", "timestamp"],
            unique=False,
        )
        batch_op.create_index(
            "idx_ai_audit_risk", ["risk_score", "timestamp"], unique=False
        )
        batch_op.create_index(
            "idx_ai_audit_session", ["session_id", "timestamp"], unique=False
        )
        batch_op.create_index(
            "idx_ai_audit_status", ["operation_status", "timestamp"], unique=False
        )
        batch_op.create_index(
            "idx_ai_audit_user_timestamp", ["user_id", "timestamp"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_audit_logs_operation_type"),
            ["operation_type"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_audit_logs_session_id"), ["session_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_audit_logs_timestamp"), ["timestamp"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_audit_logs_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "current_medications",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("family_member_id", sa.Integer(), nullable=False),
        sa.Column("medicine", sa.String(length=200), nullable=False),
        sa.Column("strength", sa.String(length=100), nullable=True),
        sa.Column("morning", sa.String(length=50), nullable=True),
        sa.Column("noon", sa.String(length=50), nullable=True),
        sa.Column("evening", sa.String(length=50), nullable=True),
        sa.Column("bedtime", sa.String(length=50), nullable=True),
        sa.Column("duration", sa.String(length=150), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["family_member_id"],
            ["family_members.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "medical_conditions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("family_member_id", sa.Integer(), nullable=True),
        sa.Column("condition_name", sa.String(length=200), nullable=False),
        sa.Column("condition_category", sa.String(length=100), nullable=True),
        sa.Column("icd_code", sa.String(length=20), nullable=True),
        sa.Column("diagnosed_date", sa.DateTime(), nullable=True),
        sa.Column("diagnosing_doctor", sa.String(length=200), nullable=True),
        sa.Column("current_status", sa.String(length=50), nullable=False),
        sa.Column("severity", sa.String(length=20), nullable=True),
        sa.Column("last_updated", sa.DateTime(), nullable=True),
        sa.Column("current_treatments", sa.Text(), nullable=True),
        sa.Column("treatment_goals", sa.Text(), nullable=True),
        sa.Column("treatment_effectiveness", sa.String(length=50), nullable=True),
        sa.Column("prognosis", sa.Text(), nullable=True),
        sa.Column("monitoring_plan", sa.Text(), nullable=True),
        sa.Column("next_review_date", sa.DateTime(), nullable=True),
        sa.Column("quality_of_life_impact", sa.String(length=20), nullable=True),
        sa.Column("functional_limitations", sa.Text(), nullable=True),
        sa.Column("work_impact", sa.String(length=50), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("external_resources", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["family_member_id"],
            ["family_members.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("medical_conditions", schema=None) as batch_op:
        batch_op.create_index(
            "idx_medical_conditions_family_member", ["family_member_id"], unique=False
        )
        batch_op.create_index(
            "idx_medical_conditions_status", ["current_status"], unique=False
        )
        batch_op.create_index("idx_medical_conditions_user", ["user_id"], unique=False)

    op.create_table(
        "user_family",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("family_member_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["family_member_id"],
            ["family_members.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "family_member_id"),
    )
    op.create_table(
        "ai_data_access",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("access_id", sa.String(length=100), nullable=False),
        sa.Column("audit_log_id", sa.Integer(), nullable=False),
        sa.Column("data_type", sa.String(length=50), nullable=False),
        sa.Column("data_id", sa.String(length=100), nullable=False),
        sa.Column("data_classification", sa.String(length=20), nullable=False),
        sa.Column("access_purpose", sa.String(length=100), nullable=False),
        sa.Column("access_method", sa.String(length=50), nullable=False),
        sa.Column("data_fields_accessed", sa.Text(), nullable=True),
        sa.Column("data_size_chars", sa.Integer(), nullable=True),
        sa.Column("sensitive_data_detected", sa.Boolean(), nullable=True),
        sa.Column("phi_categories", sa.Text(), nullable=True),
        sa.Column("legal_basis", sa.String(length=100), nullable=True),
        sa.Column("consent_id", sa.String(length=100), nullable=True),
        sa.Column("data_necessary", sa.Boolean(), nullable=True),
        sa.Column("alternative_available", sa.Boolean(), nullable=True),
        sa.Column("accessed_at", sa.DateTime(), nullable=False),
        sa.Column("data_last_modified", sa.DateTime(), nullable=True),
        sa.Column("retention_period_days", sa.Integer(), nullable=False),
        sa.Column("data_disposed", sa.Boolean(), nullable=True),
        sa.Column("disposal_date", sa.DateTime(), nullable=True),
        sa.Column("disposal_method", sa.String(length=50), nullable=True),
        sa.ForeignKeyConstraint(
            ["audit_log_id"],
            ["ai_audit_logs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ai_data_access", schema=None) as batch_op:
        batch_op.create_index(
            "idx_data_access_audit", ["audit_log_id", "accessed_at"], unique=False
        )
        batch_op.create_index(
            "idx_data_access_classification",
            ["data_classification", "accessed_at"],
            unique=False,
        )
        batch_op.create_index(
            "idx_data_access_purpose", ["access_purpose", "accessed_at"], unique=False
        )
        batch_op.create_index(
            "idx_data_access_type_id", ["data_type", "data_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_data_access_access_id"), ["access_id"], unique=True
        )
        batch_op.create_index(
            batch_op.f("ix_ai_data_access_access_purpose"),
            ["access_purpose"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_data_access_accessed_at"), ["accessed_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_data_access_audit_log_id"), ["audit_log_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_data_access_data_classification"),
            ["data_classification"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_data_access_data_id"), ["data_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_data_access_data_type"), ["data_type"], unique=False
        )

    op.create_table(
        "ai_security_events",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.String(length=100), nullable=False),
        sa.Column("event_type", sa.String(length=50), nullable=False),
        sa.Column("severity", sa.String(length=20), nullable=False),
        sa.Column("audit_log_id", sa.Integer(), nullable=True),
        sa.Column("event_description", sa.Text(), nullable=False),
        sa.Column("detection_method", sa.String(length=100), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("operation_type", sa.String(length=50), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("risk_score", sa.Float(), nullable=True),
        sa.Column("potential_impact", sa.String(length=500), nullable=True),
        sa.Column("affected_data_types", sa.Text(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("assigned_to", sa.String(length=100), nullable=True),
        sa.Column("response_actions", sa.Text(), nullable=True),
        sa.Column("resolution_notes", sa.Text(), nullable=True),
        sa.Column("detected_at", sa.DateTime(), nullable=False),
        sa.Column("acknowledged_at", sa.DateTime(), nullable=True),
        sa.Column("resolved_at", sa.DateTime(), nullable=True),
        sa.Column("closed_at", sa.DateTime(), nullable=True),
        sa.Column("notifications_sent", sa.Boolean(), nullable=True),
        sa.Column("escalated", sa.Boolean(), nullable=True),
        sa.Column("escalation_level", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["audit_log_id"],
            ["ai_audit_logs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ai_security_events", schema=None) as batch_op:
        batch_op.create_index(
            "idx_security_severity_status", ["severity", "status"], unique=False
        )
        batch_op.create_index(
            "idx_security_type_detected", ["event_type", "detected_at"], unique=False
        )
        batch_op.create_index(
            "idx_security_user_detected", ["user_id", "detected_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_security_events_audit_log_id"),
            ["audit_log_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_security_events_detected_at"),
            ["detected_at"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_security_events_event_id"), ["event_id"], unique=True
        )
        batch_op.create_index(
            batch_op.f("ix_ai_security_events_event_type"), ["event_type"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_security_events_severity"), ["severity"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_security_events_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "health_records",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("family_member_id", sa.Integer(), nullable=True),
        sa.Column("chief_complaint", sa.Text(), nullable=True),
        sa.Column("doctor", sa.String(length=200), nullable=True),
        sa.Column("investigations", sa.Text(), nullable=True),
        sa.Column("diagnosis", sa.Text(), nullable=True),
        sa.Column("prescription", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("review_followup", sa.Text(), nullable=True),
        sa.Column("appointment_type", sa.String(length=50), nullable=True),
        sa.Column("doctor_specialty", sa.String(length=100), nullable=True),
        sa.Column("clinic_hospital", sa.String(length=200), nullable=True),
        sa.Column("next_appointment", sa.DateTime(), nullable=True),
        sa.Column("cost", sa.Float(), nullable=True),
        sa.Column("related_condition_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["family_member_id"],
            ["family_members.id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_condition_id"],
            ["medical_conditions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ai_summaries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("health_record_id", sa.Integer(), nullable=False),
        sa.Column("summary_text", sa.Text(), nullable=False),
        sa.Column("summary_type", sa.String(length=20), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["health_record_id"],
            ["health_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "appointments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("family_member_id", sa.Integer(), nullable=True),
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("doctor_name", sa.String(length=200), nullable=False),
        sa.Column("doctor_specialty", sa.String(length=100), nullable=True),
        sa.Column("clinic_hospital", sa.String(length=200), nullable=True),
        sa.Column("appointment_date", sa.DateTime(), nullable=False),
        sa.Column("duration_minutes", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("purpose", sa.Text(), nullable=True),
        sa.Column("preparation", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("follow_up_needed", sa.Boolean(), nullable=True),
        sa.Column("follow_up_appointment_id", sa.Integer(), nullable=True),
        sa.Column("health_record_id", sa.Integer(), nullable=True),
        sa.Column("reminder_sent", sa.Boolean(), nullable=True),
        sa.Column("reminder_date", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["family_member_id"],
            ["family_members.id"],
        ),
        sa.ForeignKeyConstraint(
            ["follow_up_appointment_id"],
            ["appointments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["health_record_id"],
            ["health_records.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "condition_progress_notes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("condition_id", sa.Integer(), nullable=False),
        sa.Column("note_date", sa.DateTime(), nullable=False),
        sa.Column("progress_status", sa.String(length=50), nullable=False),
        sa.Column("symptoms_changes", sa.Text(), nullable=True),
        sa.Column("treatment_changes", sa.Text(), nullable=True),
        sa.Column("pain_level", sa.Integer(), nullable=True),
        sa.Column("functional_score", sa.Integer(), nullable=True),
        sa.Column("vital_measurements", sa.Text(), nullable=True),
        sa.Column("clinical_observations", sa.Text(), nullable=True),
        sa.Column("doctor_notes", sa.Text(), nullable=True),
        sa.Column("patient_reported_outcomes", sa.Text(), nullable=True),
        sa.Column("recorded_by", sa.String(length=100), nullable=True),
        sa.Column("health_record_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["condition_id"],
            ["medical_conditions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["health_record_id"],
            ["health_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("condition_progress_notes", schema=None) as batch_op:
        batch_op.create_index(
            "idx_condition_progress_condition_date",
            ["condition_id", sa.literal_column("note_date DESC")],
            unique=False,
        )

    op.create_table(
        "documents",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("health_record_id", sa.Integer(), nullable=False),
        sa.Column("filename", sa.String(length=255), nullable=False),
        sa.Column("file_path", sa.String(length=512), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=True),
        sa.Column("content_type", sa.String(length=100), nullable=True),
        sa.Column("extracted_text", sa.Text(), nullable=True),
        sa.Column("uploaded_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["health_record_id"],
            ["health_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "prescription_entries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("health_record_id", sa.Integer(), nullable=False),
        sa.Column("medicine", sa.String(length=200), nullable=False),
        sa.Column("strength", sa.String(length=100), nullable=True),
        sa.Column("morning", sa.String(length=50), nullable=True),
        sa.Column("noon", sa.String(length=50), nullable=True),
        sa.Column("evening", sa.String(length=50), nullable=True),
        sa.Column("bedtime", sa.String(length=50), nullable=True),
        sa.Column("duration", sa.String(length=100), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["health_record_id"],
            ["health_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("prescription_entries")
    op.drop_table("documents")
    with op.batch_alter_table("condition_progress_notes", schema=None) as batch_op:
        batch_op.drop_index("idx_condition_progress_condition_date")

    op.drop_table("condition_progress_notes")
    op.drop_table("appointments")
    op.drop_table("ai_summaries")
    op.drop_table("health_records")
    with op.batch_alter_table("ai_security_events", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ai_security_events_user_id"))
        batch_op.drop_index(batch_op.f("ix_ai_security_events_severity"))
        batch_op.drop_index(batch_op.f("ix_ai_security_events_event_type"))
        batch_op.drop_index(batch_op.f("ix_ai_security_events_event_id"))
        batch_op.drop_index(batch_op.f("ix_ai_security_events_detected_at"))
        batch_op.drop_index(batch_op.f("ix_ai_security_events_audit_log_id"))
        batch_op.drop_index("idx_security_user_detected")
        batch_op.drop_index("idx_security_type_detected")
        batch_op.drop_index("idx_security_severity_status")

    op.drop_table("ai_security_events")
    with op.batch_alter_table("ai_data_access", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ai_data_access_data_type"))
        batch_op.drop_index(batch_op.f("ix_ai_data_access_data_id"))
        batch_op.drop_index(batch_op.f("ix_ai_data_access_data_classification"))
        batch_op.drop_index(batch_op.f("ix_ai_data_access_audit_log_id"))
        batch_op.drop_index(batch_op.f("ix_ai_data_access_accessed_at"))
        batch_op.drop_index(batch_op.f("ix_ai_data_access_access_purpose"))
        batch_op.drop_index(batch_op.f("ix_ai_data_access_access_id"))
        batch_op.drop_index("idx_data_access_type_id")
        batch_op.drop_index("idx_data_access_purpose")
        batch_op.drop_index("idx_data_access_classification")
        batch_op.drop_index("idx_data_access_audit")

    op.drop_table("ai_data_access")
    op.drop_table("user_family")
    with op.batch_alter_table("medical_conditions", schema=None) as batch_op:
        batch_op.drop_index("idx_medical_conditions_user")
        batch_op.drop_index("idx_medical_conditions_status")
        batch_op.drop_index("idx_medical_conditions_family_member")

    op.drop_table("medical_conditions")
    op.drop_table("current_medications")
    with op.batch_alter_table("ai_audit_logs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ai_audit_logs_user_id"))
        batch_op.drop_index(batch_op.f("ix_ai_audit_logs_timestamp"))
        batch_op.drop_index(batch_op.f("ix_ai_audit_logs_session_id"))
        batch_op.drop_index(batch_op.f("ix_ai_audit_logs_operation_type"))
        batch_op.drop_index("idx_ai_audit_user_timestamp")
        batch_op.drop_index("idx_ai_audit_status")
        batch_op.drop_index("idx_ai_audit_session")
        batch_op.drop_index("idx_ai_audit_risk")
        batch_op.drop_index("idx_ai_audit_operation_timestamp")
        batch_op.drop_index("idx_ai_audit_compliance")
        batch_op.drop_index("idx_ai_audit_classification")

    op.drop_table("ai_audit_logs")
    op.drop_table("users")
    op.drop_table("family_members")
    with op.batch_alter_table("ai_operation_metrics", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ai_operation_metrics_operation_type"))
        batch_op.drop_index(batch_op.f("ix_ai_operation_metrics_metric_date"))
        batch_op.drop_index(batch_op.f("ix_ai_operation_metrics_aggregation_period"))
        batch_op.drop_index("idx_metrics_period_model")
        batch_op.drop_index("idx_metrics_performance")
        batch_op.drop_index("idx_metrics_date_type")

    op.drop_table("ai_operation_metrics")
    with op.batch_alter_table("ai_compliance_reports", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ai_compliance_reports_report_id"))
        batch_op.drop_index(batch_op.f("ix_ai_compliance_reports_period_start"))
        batch_op.drop_index(batch_op.f("ix_ai_compliance_reports_period_end"))
        batch_op.drop_index(batch_op.f("ix_ai_compliance_reports_compliance_framework"))
        batch_op.drop_index("idx_compliance_score_status")
        batch_op.drop_index("idx_compliance_framework_period")
        batch_op.drop_index("idx_compliance_created")

    op.drop_table("ai_compliance_reports")
    # ### end Alembic commands ###
