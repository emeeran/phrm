[project]
name = "phrm"
version = "1.0.0"
description = "Personal Health Record Manager - A comprehensive Flask-based health management system with AI-powered chat and local RAG"
authors = [
    {name = "PHRM Team", email = "team@phrm.com"}
]
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
keywords = ["health", "medical", "records", "flask", "ai", "rag", "family-health"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Flask",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    # Core Flask Framework
    "Flask>=3.1.0",
    "Flask-SQLAlchemy>=3.1.1",
    "Flask-Login>=0.6.3",
    "Flask-WTF>=1.2.2",
    "Flask-Migrate>=4.0.7",
    "Flask-Mail>=0.10.0",
    # Security and Rate Limiting
    "Flask-Limiter>=3.8.0",
    "Flask-Talisman>=1.1.0",
    "WTForms>=3.2.1",
    "bcrypt>=4.2.1",
    "cryptography>=43.0.0",
    # Database and Caching
    "SQLAlchemy>=2.0.30",
    "redis>=5.2.0",
    "Flask-Caching>=2.3.0",
    # WSGI Server and Production
    "gunicorn>=22.0.0",
    "gevent>=24.2.1",
    # AI Integration and HTTP Requests
    "requests>=2.32.3",
    "aiohttp>=3.12.0",
    # Document Processing
    "pypdf>=3.0.0",
    "pymupdf>=1.24.0",
    "Pillow>=10.4.0",
    # Vector Database for RAG
    "chromadb>=0.4.0",
    # LangChain for AI/RAG functionality
    "langchain>=0.3.12",
    "langchain-community>=0.3.12",
    "langchain-openai>=0.2.14",
    # Utilities and System Monitoring
    "python-dotenv>=1.0.1",
    "psutil>=6.0.0",
    # Core Python Dependencies
    "Werkzeug>=3.1.0",
    "click>=8.1.7",
    "itsdangerous>=2.2.0",
    "MarkupSafe>=3.0.0",
    "Jinja2>=3.1.4",
    "blinker>=1.9.0",
    "email-validator>=2.2.0",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "coverage>=7.9.1",
    "mypy>=1.16.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "pytest-cov>=6.2.1",
    "pytest-flask>=1.3.0",
    "ruff>=0.11.13",
    "isort>=6.0.1",
    "types-redis>=4.6.0.20241004",
    "types-requests>=2.32.0.20241016",
    "types-Pillow>=10.2.0.20240822",
]

test = [
    "pytest>=8.4.0",
    "pytest-flask>=1.3.0",
    "pytest-cov>=6.2.1",
    "coverage>=7.9.1",
]

optional = [
    # Optional database drivers
    "psycopg2-binary>=2.9.9",  # PostgreSQL driver
    # Additional AI providers
    "openai>=1.50.0",  # OpenAI API client
]

[project.scripts]
phrm = "run_family_health:main"
phrm-setup = "setup:main"

[project.urls]
Homepage = "https://github.com/phrm/phrm"
Documentation = "https://github.com/phrm/phrm/docs"
Repository = "https://github.com/emeeran/phrm.git"
"Bug Tracker" = "https://github.com/phrm/phrm/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.ruff]
line-length = 88
target-version = "py39"
extend-exclude = ["migrations", "instance"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLW0603", # using global statement
    "ARG002",  # unused method argument
    "DTZ005",  # timezone-naive datetime
    "UP007",   # typing union syntax (X | Y)
    "E402",    # module level import not at top
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__ files
"test_*.py" = ["ARG001", "ARG002"]  # Allow unused arguments in tests
"scripts/*.py" = ["PLR0913"]  # Allow many arguments in scripts

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/instance/*",
    "*/uploads/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
exclude = [
    "migrations/",
    "tests/",
]

[[tool.mypy.overrides]]
module = [
    "flask_*",
    "chromadb",
    "langchain*",
    "pymupdf",
    "fitz",
]
ignore_missing_imports = true
